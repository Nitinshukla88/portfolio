import {
  ExternalLink,
  Github,
  Code,
  Eye,
  Star,
  Layers,
  Award,
} from "lucide-react";
import { SectionHeading } from "./SectionHeading";
import { SectionWrapper } from "./SectionWrapper";
import { useState, useRef } from "react";
import { Badge } from "./ui/badge";
import { Button } from "./ui/button";
import { assets } from "../assets/assets";

// Add custom CSS for medium and large screens
const customStyles = `
  @media (min-width: 800px) {
    .custom-row-even {
      flex-direction: row !important;
    }
    .custom-row-odd {
      flex-direction: row-reverse !important;
    }
    .custom-half-width {
      width: 50% !important;
    }
  }
`;

const projects = [
  {
    title: "DocDuce",
    description:
      'DocDuce is an innovative, AI-powered application that transforms dense PDF documents into a beautiful and interactive "reel" of impactful summaries. Users can securely upload their files and receive clear, structured insights generated by DeepInfra\'s Powerful API, making complex information easy to digest.',
    image: assets.docduce,
    tags: [
      {
        name: "Next.js",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/nextjs/nextjs-original.svg",
      },
      {
        name: "React",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      },
      {
        name: "TailwindCSS",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/tailwindcss/tailwindcss-original.svg",
      },
      {
        name: "TypeScript",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/typescript/typescript-original.svg",
      },
      // { name: "Prisma", image: "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/prisma/prisma-original.svg" },
      {
        name: "PostgreSQL",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/postgresql/postgresql-original.svg",
      },
      // { name: "Inngest", image: "https://avatars.githubusercontent.com/u/99505101?s=200&v=4" },
      // { name: "Arcjet", image: "https://avatars.githubusercontent.com/u/149997572?s=200&v=4" }
    ],
    liveLink: "https://doc-duce.vercel.app/",
    sourceLink: "https://github.com/Nitinshukla88/DocDuce",
    keyFeatures: [
      "🚀 Next.js 15 App Router for server-side rendering, routing.",
      "🌐 React for building interactive user interfaces with reusable components",
      "🔑 Clerk for secure authentication with Passkeys, Github & Google Sign-in",
      "🤖 GPT-4 powered summarization with contextual understanding.",
      "🧠 Langchain for PDF parsing, text extraction, document chunking",
      "🤝 ShadcN UI for accessible, customizable React components",
      "🏚️ NeonDB for serverless database storage of summaries and user data",
      "👉 UploadThing for secure PDF uploads (up to 32MB) and file management",
    ],
  },
  {
    title: "GeekMatch",
    description:
      "GeekMatch💖, is a social networking platform that facilitates professional connections among software developers. It provides a dedicated space where developers can connect with peers, find collaborators for projects, and network with like-minded individuals. The platform's intuitive interface streamlines the process of discovering and engaging with a global community of fellow coders.",
    image: assets.geekmatch,
    tags: [
      {
        name: "React",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      },
      // { name: "TypeScript", image: "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/typescript/typescript-original.svg" },
      {
        name: "Tailwind CSS",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/tailwindcss/tailwindcss-original.svg",
      },
      {
        name: "NodeJs",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/nodejs/nodejs-original.svg",
      },
      {
        name: "ExpressJs",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/express/express-original.svg",
      },
      {
        name: "MongoDB",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/mongodb/mongodb-original.svg",
      },
      // { name: "Netlify", image: "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/netlify/netlify-original.svg" },
    ],
    liveLink: "https://geek-match-frontend.vercel.app/",
    sourceLink: "https://github.com/Nitinshukla88/GeekMatch-Frontend",
    keyFeatures: [
      "🚀 React.js to build and handle the interactive user interface (UI).",
      "🌐 Node.js to run the server side code in the backend.",
      "🧠 Express.js to handle all the routing, middleware, and API endpoints",
      "🏚️ MongoDB database for storing data in flexible, JSON-like documents",
      "💳 Razorpay for subscription management and secure payment processing",
      "💫 Redux to provide a predictable, centralized store to manage data flow.",
      "🖋️ TailwindCSS for utility-first, responsive styling",
    ],
  },
  {
    title: "MovieVerse",
    description:
      'MovieVerse📺, is a dynamic and intuitive movie recommendation engine designed to tackle the modern problem of "decision paralysis." The application allows users to search for films based on genre, keywords, or a combination of criteria, and in return, it presents a visually rich list of relevant titles. Each suggestion comes with summaries, empowering users to find the perfect movie for any mood or occasion.',
    image: assets.movieverse,
    tags: [
      {
        name: "React",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      },
      {
        name: "Javascript",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg",
      },
      {
        name: "Firebase",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/firebase/firebase-plain.svg",
      },
      {
        name: "TailWind CSS",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/tailwindcss/tailwindcss-original.svg",
      },
      {
        name: "Redux",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/redux/redux-original.svg",
      },
    ],
    liveLink: "https://movie-verse-ashy-five.vercel.app/",
    sourceLink: "https://github.com/Nitinshukla88/MovieVerse",
    keyFeatures: [
      "🚀 React.js to build interactive user interface & manage the client-side logic",
      "🌐 Firebase for backend services like authentication, database, storage.",
      "🏚️ The Movie-Database for movie data (TMDB)",
      "💫 Redux to provide a centralized store for your React application's state.",
      "🖋️ TailwindCSS for utility-first, responsive styling",
    ],
  },
  {
    title: "YouTube-Clone",
    description:
      "YouTube-Clone📹, is a feature-rich video streaming platform that emulates the core functionalities of YouTube. Built with React for the frontend along with Redux and Tailwind CSS for styling.",
    image: assets.youtubeclone,
    tags: [
      {
        name: "React",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      },
      {
        name: "JavaScript",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg",
      },
      {
        name: "Redux",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/redux/redux-original.svg",
      },
      {
        name: "Tailwind CSS",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/tailwindcss/tailwindcss-original.svg",
      },
      // { name: "Node.js", image: "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/nodejs/nodejs-original.svg" },
      // { name: "Express", image: "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/express/express-original.svg" },
      // { name: "MongoDB", image: "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/mongodb/mongodb-original.svg" },
      // { name: "Stripe", image: assets.stripe },
    ],
    liveLink: "https://youtube-clone-bay-zeta.vercel.app/",
    sourceLink: "https://github.com/Nitinshukla88/youtube-clone",
    keyFeatures: [
      "🛒 Users can explore the video library",
      "🧑‍🍳 Search panel with caching & debouncing implementation",
      "📦 Video Page to streams the videos",
      "📱 With the help of YouTube API, unlimited videos can be watched.",
      "☁️ Efficient state management with Redux",
    ],
  },
  {
    title: "My Portfolio",
    description:
      "A sleek and responsive personal portfolio website built with modern web technologies, showcasing projects, skills, and contact information. Designed for performance and scalability.",
    image: assets.myportfolio,
    tags: [
      {
        name: "React",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      },
      {
        name: "TypeScript",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/typescript/typescript-original.svg",
      },
      {
        name: "Tailwind CSS",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/tailwindcss/tailwindcss-original.svg",
      },
      {
        name: "Netlify",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/netlify/netlify-original.svg",
      },
    ],
    liveLink: "https://portfolio-kusuma.netlify.app/",
    sourceLink: "https://github.com/Nitinshukla88/portfolio",
    keyFeatures: [
      "🎨 Clean, minimalist UI with Tailwind CSS",
      "⚡ Fast development and build process using Vite",
      "📱 Fully responsive design for mobile and desktop",
      "🔐 Type-safe codebase with TypeScript",
      "🧩 Modular component structure for easy maintenance",
      "☁️ Cloud deployment via Netlify",
    ],
  },
  {
    title: "GrooveBox",
    description:
      "GrooveBox is a single page music player where you can go and enjoy the songs. It has functionalities like play, pause, forward and backward play in real-time.",
    image: assets.groovebox,
    tags: [
      // { name: "HTML", image: "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg" },
      // { name: "OpenWeatherMap API", image: "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg" },
      // { name: "Geolocation", image: "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg" },
      // { name: "Maps", image: "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg" },
      {
        name: "HTML",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/html5/html5-original.svg",
      },
      {
        name: "CSS",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/css3/css3-original.svg",
      },
      {
        name: "JavaScript",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg",
      },
    ],
    liveLink: "https://groove-box-ten.vercel.app/",
    sourceLink: "https://github.com/Nitinshukla88/GrooveBox",
    keyFeatures: [
      "🎵 Instantly stream and enjoy a seamless music experience.",
      "🎛️ Real-time playback controls: play, pause, skip forward, and backward.",
      "🚀 Single-page application for instant loading and uninterrupted listening.",
      "🎨 Minimalist design that puts your music front and center.",
    ],
  },
  {
    title: "JumpMania",
    description:
      "JumpMania is a fast-paced arcade game where you must keep running, leaping over challenging obstacles and hazards to rack up points. With increasing difficulty and dynamic environments, the game tests your reflexes and timing as you strive to achieve the highest score possible.",
    image: assets.jumpmania,
    tags: [
      {
        name: "HTML",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/html5/html5-original.svg",
      },
      {
        name: "CSS",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/css3/css3-original.svg",
      },
      {
        name: "JavaScript",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg",
      },
    ],
    liveLink: "https://jump-mania-ten.vercel.app/",
    sourceLink: "https://github.com/Nitinshukla88/JumpMania",
      keyFeatures: [
        "🏃 Endless runner gameplay with increasing speed and difficulty",
        "📱 Responsive controls for jumping and dodging obstacles",
        "🌟 Dynamic environments and visually engaging graphics",
        "🎯 Score tracking and high-score challenge",
      ],
  },
  {
    title: "Tic-Tac-Toe Game",
    description:
      "A classic Tic-Tac-Toe game built with HTML, CSS, and JavaScript, where users compete against a smart computer opponent. The game features sleek animations and engaging sound effects, providing a visually appealing and interactive experience in a simple, intuitive interface.",
    image: assets.tictactoe,
    tags: [
      {
        name: "HTML",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/html5/html5-original.svg",
      },
      {
        name: "CSS",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/css3/css3-original.svg",
      },
      {
        name: "JavaScript",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg",
      },
    ],
    liveLink: "https://tic-tac-toe-wheat-xi-99.vercel.app/",
    sourceLink: "https://github.com/Nitinshukla88/Tic-Tac-Toe",
    keyFeatures: [
    "🎮 Play against a smart computer opponent",
    "✨ Sleek animations for smooth transitions and moves",
    "🔊 Engaging sound effects for every action",
    "📊 Real-time score tracking for the player and computer",
    "🔁 Seamless option to play multiple rounds",
    ],
  },
  {
    title: "Weathery",
      description:
        "Weathery is a weather forecasting web application that fetches real-time weather conditions for any city using the OpenWeather Rapid API. Instantly view temperature, humidity, and other details with a clean and responsive interface.",
    image: assets.weathery,
    tags: [
      {
        name: "HTML",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/html5/html5-original.svg",
      },
      {
        name: "CSS",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/css3/css3-original.svg",
      },
      {
        name: "JavaScript",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg",
      },
      {
        name: "OpenWeather-API",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg",
      },
    ],
    liveLink: "https://weathery-mu.vercel.app/",
    sourceLink: "https://github.com/Nitinshukla88/Weathery",
    keyFeatures: [
    "�️ Real-time weather data for any city using OpenWeather Rapid API",
    "🔍 Instantly view temperature, humidity, wind speed, and conditions",
    "� Fully responsive design for mobile and desktop",
    "🎨 Clean and modern UI for easy readability",
    "⚡ Fast and efficient data fetching and display",
    ],
  },
  {
    title: "Travel Journal (UI Design)",
    description:
      "A static travel journal interface designed using React and CSS. This project focuses on clean visual layout, responsiveness, and modern UI aesthetics.",
    image: assets.traveljournal,
    tags: [
      {
        name: "React",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      },
      {
        name: "CSS",
        image:
          "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/css3/css3-original.svg",
      },
    ],
    liveLink: "https://nammi-kusuma.github.io/travel-journal/",
    sourceLink: "https://github.com/Nammi-Kusuma/travel-journal",
    keyFeatures: [
      "🖼️ Visually appealing layout for showcasing travel destinations",
      "📍 Location and description sections styled for clarity and balance",
      "🎨 Fully responsive and mobile-friendly UI",
      "🧩 Reusable React components for consistent design",
    ],
  },
];

import { motion, useInView } from "framer-motion";
import { useEffect } from "react";

export function ProjectsSection() {
  // Add the custom styles to the document
  useEffect(() => {
    const styleElement = document.createElement("style");
    styleElement.textContent = customStyles;
    document.head.appendChild(styleElement);

    return () => {
      document.head.removeChild(styleElement);
    };
  }, []);
  const [expandedProject, setExpandedProject] = useState<number | null>(null);
  const sectionRef = useRef<HTMLDivElement>(null);
  const isInView = useInView(sectionRef, { once: true, amount: 0.1 });
  return (
    <SectionWrapper id="projects">
      <div className="container mx-auto max-w-6xl" ref={sectionRef}>
        <SectionHeading>Projects</SectionHeading>

        <motion.div
          className="text-center max-w-3xl mx-auto mb-16 mt-4"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2, duration: 0.8 }}
        >
          <h3 className="text-xl md:text-2xl font-medium text-primary mb-3">
            <span className="gradient-text">
              Turning Ideas into Digital Reality
            </span>
          </h3>
          <p className="text-muted-foreground">
            Explore my portfolio of innovative projects that showcase my
            technical skills, problem-solving abilities, and passion for
            creating impactful digital experiences.
          </p>
        </motion.div>

        <div className="space-y-20 mt-10">
          {projects.map((project, index) => (
            <motion.div
              key={index}
              className={`flex flex-col gap-8 items-center ${
                index % 2 === 0 ? "custom-row-even" : "custom-row-odd"
              }`}
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: isInView ? 1 : 0, y: isInView ? 0 : 50 }}
              transition={{ duration: 0.7, delay: index * 0.2 }}
            >
              {/* Image */}
              <div className="w-full md:w-full lg:w-1/2 custom-half-width overflow-hidden rounded-lg border border-border/40 hover:border-primary/30 transition-all duration-300 group relative">
                <img
                  src={project.image}
                  alt={project.title}
                  className="w-full h-64 object-cover transition-transform duration-700 group-hover:scale-105"
                />
                <div className="absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
                  <div className="flex gap-4">
                    <Button
                      size="sm"
                      variant="secondary"
                      className="rounded-full"
                      asChild
                    >
                      <a
                        href={project.liveLink}
                        target="_blank"
                        rel="noopener noreferrer"
                      >
                        <Eye className="h-4 w-4 mr-1" />
                        Demo
                      </a>
                    </Button>
                    <Button
                      size="sm"
                      variant="secondary"
                      className="rounded-full"
                      asChild
                    >
                      <a
                        href={project.sourceLink}
                        target="_blank"
                        rel="noopener noreferrer"
                      >
                        <Code className="h-4 w-4 mr-1" />
                        Code
                      </a>
                    </Button>
                  </div>
                </div>

                {/* Tech badges */}
                <div className="absolute top-3 left-3 flex gap-1">
                  {project.tags.slice(0, 3).map((tag, idx) => (
                    <div
                      key={idx}
                      className="h-8 w-8 rounded-full bg-background/80 backdrop-blur-sm p-1 flex items-center justify-center"
                      title={tag.name}
                    >
                      <img
                        src={tag.image}
                        alt={tag.name}
                        className="h-full w-full object-contain"
                      />
                    </div>
                  ))}
                  {project.tags.length > 3 && (
                    <Badge
                      variant="outline"
                      className="bg-background/80 backdrop-blur-sm h-8 px-2"
                    >
                      +{project.tags.length - 3}
                    </Badge>
                  )}
                </div>
              </div>

              {/* Content */}
              <div className="w-full md:w-full lg:w-1/2 custom-half-width space-y-5">
                <div>
                  <h3 className="text-2xl font-bold text-primary mb-2 group-hover:text-accent transition-colors">
                    {project.title}
                  </h3>
                  <p className="text-muted-foreground">{project.description}</p>
                </div>

                <div className="space-y-4">
                  <div className="flex items-center gap-2">
                    <Layers className="h-4 w-4 text-primary" />
                    <span className="text-sm font-medium">Tech Stack</span>
                  </div>

                  <div className="flex flex-wrap gap-2">
                    {project.tags.map((tag) => (
                      <Badge
                        key={tag.name}
                        variant="outline"
                        className="flex items-center gap-1 bg-secondary/20 hover:bg-secondary/30 transition-colors"
                      >
                        {tag.image && (
                          <img
                            src={tag.image}
                            alt={tag.name}
                            className="w-4 h-4"
                          />
                        )}
                        <span className="text-xs">{tag.name}</span>
                      </Badge>
                    ))}
                  </div>
                </div>

                <div>
                  <Button
                    variant="ghost"
                    className="px-0 text-primary hover:text-accent hover:bg-transparent transition-colors"
                    onClick={() =>
                      setExpandedProject(
                        expandedProject === index ? null : index
                      )
                    }
                  >
                    {expandedProject === index ? "Show Less" : "Show More"}
                  </Button>

                  {expandedProject === index && (
                    <motion.div
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: "auto" }}
                      exit={{ opacity: 0, height: 0 }}
                      transition={{ duration: 0.3 }}
                      className="mt-4 space-y-4 pt-4 border-t border-border/50"
                    >
                      <div className="flex items-center gap-2">
                        <Award className="h-4 w-4 text-primary" />
                        <span className="text-sm font-medium">
                          Key Features
                        </span>
                      </div>

                      <ul className="text-sm text-muted-foreground space-y-2 pl-6 list-disc">
                        {project.keyFeatures.map((feature, index) => (
                          <li key={index}>{feature}</li>
                        ))}
                      </ul>

                      <div className="flex gap-4 pt-2">
                        <Button size="sm" className="gap-1" asChild>
                          <a
                            href={project.liveLink}
                            target="_blank"
                            rel="noopener noreferrer"
                          >
                            <Eye className="h-3.5 w-3.5" />
                            Live Demo
                          </a>
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          className="gap-1"
                          asChild
                        >
                          <a
                            href={project.sourceLink}
                            target="_blank"
                            rel="noopener noreferrer"
                          >
                            <Github className="h-3.5 w-3.5" />
                            Source
                          </a>
                        </Button>
                      </div>
                    </motion.div>
                  )}
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    </SectionWrapper>
  );
}
